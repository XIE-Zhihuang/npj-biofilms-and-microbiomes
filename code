
install.packages("WGCNA")
library(WGCNA)
source("http://bioconductor.org/biocLite.R") ##不需要
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore")) ##不需要
library(igraph)
otu<-read.table('otuwl.txt',header=T)
cor<-corAndPvalue(t(otu),y=NULL,use = "pairwise.complete.obs",alternative="two.sided",method="spearman")
cor.cor<-cor$cor
cor.p<-cor$p
cor.cor[cor.p>0.05|abs(cor.cor)<0.8] = 0
cor.cor2<-abs(cor.cor)
igraph = graph_from_adjacency_matrix(cor.cor,mode="undirected",weighted=TRUE,diag=FALSE)
write.graph(igraph,file="0.6edge.txt",format="ncol")
g<-graph_from_adjacency_matrix(cor.cor2,mode="undirected",weighted=TRUE,diag=FALSE)


RDA
library(vegan)
library(ggplot2)
library(ggrepel)
library(RColorBrewer)
otu=read.table("C:/Users/DELL/Desktop/OTU2.txt",header=T) 
env=read.table("C:/Users/DELL/Desktop/ENV.txt",header=T)
env=subset(env, select=c(PH,AK,AP,NO3_N,NH4_N,TC,TN,TC_TN,TP,TK))
otut = t(otu) 
mycolor<-brewer.pal(12, "Set3")
spp=decostand(otut,method = "hellinger")
##fcc=log10(env)
uu=rda(spp~.,env)
ii=summary(uu)
sp=as.data.frame(ii$species[,1:2])*5
st=as.data.frame(ii$sites[,1:2])
yz=as.data.frame(ii$biplot[,1:2])
#group1 = c('YCK','YC','YK','TCK','TC','TK')
design = read.table("C:/Users/DELL/Desktop/design.txt", header=T, row.names=1, sep="\t")
group1 = design$genotype

p<- ggplot() +
  geom_point(data = st,aes(RDA1,RDA2,colour=group1,shape = group1),size=4)
p

p=p+geom_segment(data = yz,aes(x = 0, y = 0, xend = RDA1, yend = RDA2), 
                 arrow = arrow(angle=22.5,length = unit(0.35,"cm"),
                               type = "closed"),linetype=1, size=0.6,colour = "gray")+
  geom_text_repel(data = yz,aes(RDA1,RDA2,label=row.names(yz)))+
  #labs(x="RDA1 42.72%",y="RDA2 26.10%")+
  geom_hline(yintercept=0,linetype=3,size=1) + 
  geom_vline(xintercept=0,linetype=3,size=1)+
  theme_bw()+theme(panel.grid=element_blank())
p
p+
  scale_color_manual(values = mycolor[c(3,1,6,4,2,5)])+
  scale_shape_manual(values = c(16,16,16,16,16,16))

#geom_segment(data = sp,aes(x = 0, y = 0, xend = RDA1, yend = RDA2), 
arrow = arrow(angle=22.5,length = unit(0.35,"cm"),type = "closed"),linetype=1,size=0.6,colour = "red")+
  #geom_text_repel(data = sp,aes(RDA1,RDA2,label=row.names(sp)))



library(vegan)
otub=read.table("otu.txt",header=T)
# 定义进行比较的2个处理所在的行列（第1行和第1列作为表头，以Excel中的行列数为主）
otu1=otub[c(1:8,9:16)]
# 将OTU数据表进行“转置”
otu1=t(otu1)
# 定义每个处理的重复数
group=c(1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2)
# 并列的3种方法
# Adonis分析
ad=adonis(otu1~group,permutations = 999,distance = "bray") # 基于Bray-Curtis距离
ad=adonis(otu1~group,permutations = 999,distance = "wunifrac") # 基于Weighted UniFrac距离
ad

# Anosim分析
an=anosim(otu1,group,permutations = 999 , distance = "bray") # 基于Bray-Curtis距离
an=anosim(otu1,group,permutations = 999 , distance = "wunifrac") # 基于Weighted UniFrac距离
an

#pcoa
library(vegan)
otu <- read.delim('N11F.txt', row.names = 1, sep = '\t', stringsAsFactors = FALSE, check.names = FALSE)
otu <- data.frame(t(otu))
distance <- vegdist(otu, method = 'bray')
pcoa <- cmdscale(distance, k = (nrow(otu) - 1), eig = TRUE)
write.table(as.matrix(distance), 'bray.csv', quote = F)  ##生成矩阵

library(ggplot2)
design = read.table("design.txt", header=T, row.names=1, sep="\t")
design$group1=design$group1


# method = c("weighted_unifrac","unweighted_unifrac","bray_curtis")
#beta = read.table("bray.txt", header=T, row.names=1, sep="\t", comment.char="") 
beta = read.csv("bray.csv",header=T, row.names=1)
# k is dimension, 3 is recommended; eig is eigenvalues
pcoa = cmdscale(beta, k = 4, eig=T)
# get coordinate string, format to dataframme
points = as.data.frame(pcoa$points) 
eig = pcoa$eig
# rename group name
levels(sub_design$group2)=c("N11a","A11a","N11b","A11b","N11c","A11c","N11d","A11d")
points = cbind(points, sub_design$group2)
colnames(points) = c("PC1", "PC2", "PC3", "PC4","group") 

p <- ggplot(points, aes(PC1, PC2,group = group)) +
  geom_vline(xintercept = 0, color = 'gray', size = 0.4,linetype="dashed") + 
  geom_hline(yintercept = 0, color = 'gray', size = 0.4,linetype="dashed") +
  geom_point(aes(fill = group,shape = group),color ='white', size = 8, alpha = 0.8) + 
  labs(x=paste("PCoA 1 (", format(100 * eig[1] / sum(eig), digits=4), "%)", sep=""),
       y=paste("PCoA 2 (", format(100 * eig[2] / sum(eig), digits=4), "%)", sep=""))+
  scale_shape_manual(values = c(21, 24,21, 24,21, 24,21, 24)) + #可在这里修改点的形状
  theme_bw()+theme(panel.grid=element_blank())
p
##p=p + stat_ellipse(aes(x = PC1, y = PC2, fill = group), geom = "polygon", alpha = 0.2,level=0.68,linetype = 2,col="gray")
p+scale_fill_manual(values = c("#6495ED","#4169E1","#000080","#00008B","#6495ED","#4169E1","#000080","#00008B"))


